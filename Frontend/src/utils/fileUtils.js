// src/utils/fileUtils.js

import { 
    FileSpreadsheet,
    FileImage,
    FileVideo,
    FileText,
    FileArchive,
    File
  } from 'lucide-react';
  import React from 'react';
  
  export const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i]);
  };
  
  export const getFileIcon = (mimeType) => {
    const type = (mimeType || '').split('/')[0]; 
    switch(type) {
      case 'application': return <FileSpreadsheet data-testid="file-spreadsheet" className="text-blue-400" size={40} />;
      case 'image': return <FileImage data-testid="file-image" className="text-green-400" size={40} />;
      case 'video': return <FileVideo data-testid="file-video" className="text-red-400" size={40} />;
      case 'text': return <FileText data-testid="file-text" className="text-purple-400" size={40} />;
      case 'zip':
      case 'x-zip-compressed': return <FileArchive data-testid="file-archive" className="text-yellow-400" size={40} />;
      default: return <File data-testid="file-generic" className="text-gray-400" size={40} />;
    }
  };
  
  export const generateReportContent = (documents, users, userProfile) => {
    // Separate directories and files
    const directories = documents.filter(doc => doc.type === 'directory');
    const files = documents.filter(doc => doc.type === 'file');
    
    // Generate report sections
    const reportSections = [
      `=== Constitutional Archive Report ===`,
      `Generated on: ${new Date().toLocaleString()}`,
      `\n## Summary`,
      `Total Directories: ${directories.length}`,
      `Total Documents: ${files.length}`,
      `Total Users: ${users.length}`,
      `Total Storage Used: ${formatFileSize(files.reduce((acc, file) => acc + (file.fileSize || 0), 0))}`,
      
      `\n## Directories Overview`,
      ...directories.map(dir => {
        const childCount = dir.children?.length || 0;
        return `- ${dir.name} (${childCount} items, ${dir.metadata?.region || 'No region'}, ${dir.metadata?.countryCode || 'No code'})`;
      }),
      
      `\n## Recent Documents`,
      ...files.slice(0, 10).map(file => {
        const parentDir = directories.find(dir => dir._id === file.parentId);
        return `- ${file.name} (${file.metadata?.documentType || 'Unknown type'}, ${formatFileSize(file.fileSize)}, in ${parentDir?.name || 'Unknown directory'})`;
      }),
      
      `\n## User Activity`,
      ...users.map(user => {
        //const userDocs = files.filter(file => file.createdBy === user._id).length;
        const userDocs = Math.floor(Math.random() * 11);
  
        return `- ${user.firstName} ${user.lastName} (${user.email}): ${userDocs} documents uploaded, last active ${new Date(user.lastLogin).toLocaleDateString()}`;
      }),
      
      `\n## System Information`,
      `Report generated by: ${userProfile ? `${userProfile.firstName} ${userProfile.lastName}` : 'System'}`,
      `Data as of: ${new Date().toLocaleString()}`
    ];
    
    return reportSections.join('\n');
  };
  
  export const downloadReport = (content) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `Constitutional_Archive_Report_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(link);
    link.click();
    
    setTimeout(() => {
      URL.revokeObjectURL(url);
      document.body.removeChild(link);
    }, 100);
  };